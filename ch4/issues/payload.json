{
    "total_count": 60,
    "incomplete_results": false,
    "items": [
        {
            "url": "https://api.github.com/repos/golang/go/issues/33416",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/33416/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/33416/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/33416/events",
            "html_url": "https://github.com/golang/go/pull/33416",
            "id": 475854891,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzAzNTI1OTI2",
            "number": 33416,
            "title": "encoding/json: This CL adds Decoder.InternKeys",
            "user": {
                "login": "bserdar",
                "id": 3670797,
                "node_id": "MDQ6VXNlcjM2NzA3OTc=",
                "avatar_url": "https://avatars.githubusercontent.com/u/3670797?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bserdar",
                "html_url": "https://github.com/bserdar",
                "followers_url": "https://api.github.com/users/bserdar/followers",
                "following_url": "https://api.github.com/users/bserdar/following{/other_user}",
                "gists_url": "https://api.github.com/users/bserdar/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bserdar/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bserdar/subscriptions",
                "organizations_url": "https://api.github.com/users/bserdar/orgs",
                "repos_url": "https://api.github.com/users/bserdar/repos",
                "events_url": "https://api.github.com/users/bserdar/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bserdar/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 831707000,
                    "node_id": "MDU6TGFiZWw4MzE3MDcwMDA=",
                    "url": "https://api.github.com/repos/golang/go/labels/cla:%20yes",
                    "name": "cla: yes",
                    "color": "0e8a16",
                    "default": false,
                    "description": "Used by googlebot to label PRs as having a valid CLA. The text of this label should not change."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 26,
            "created_at": "2019-08-01T19:40:12Z",
            "updated_at": "2021-06-21T17:03:49Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "draft": false,
            "pull_request": {
                "url": "https://api.github.com/repos/golang/go/pulls/33416",
                "html_url": "https://github.com/golang/go/pull/33416",
                "diff_url": "https://github.com/golang/go/pull/33416.diff",
                "patch_url": "https://github.com/golang/go/pull/33416.patch"
            },
            "body": "The existing decoder creates a new string for every key.\r\nFor large JSON input where keys are repeated, we can avoid\r\nthis by interning keys. This change adds a Decoder.InternKeys\r\nfunction that causes the decoder to store keys in a\r\nmap[string]string and uses a single copy for repeated keys.\r\nThe default behavior is not to intern keys.\r\n    \r\nThis change only affects Decoder when decoding to an interface{}\r\nor, when tokenizing the input. It does not affect Unmarshal, or\r\ndecoding to a struct.\r\n\r\nFixes #32779\r\n\r\n",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/43716",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/43716/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/43716/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/43716/events",
            "html_url": "https://github.com/golang/go/pull/43716",
            "id": 786725381,
            "node_id": "MDExOlB1bGxSZXF1ZXN0NTU1NTU3MzYz",
            "number": 43716,
            "title": "encoding/json: increment byte counter when using decoder.Token",
            "user": {
                "login": "ggaaooppeenngg",
                "id": 4769989,
                "node_id": "MDQ6VXNlcjQ3Njk5ODk=",
                "avatar_url": "https://avatars.githubusercontent.com/u/4769989?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/ggaaooppeenngg",
                "html_url": "https://github.com/ggaaooppeenngg",
                "followers_url": "https://api.github.com/users/ggaaooppeenngg/followers",
                "following_url": "https://api.github.com/users/ggaaooppeenngg/following{/other_user}",
                "gists_url": "https://api.github.com/users/ggaaooppeenngg/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/ggaaooppeenngg/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ggaaooppeenngg/subscriptions",
                "organizations_url": "https://api.github.com/users/ggaaooppeenngg/orgs",
                "repos_url": "https://api.github.com/users/ggaaooppeenngg/repos",
                "events_url": "https://api.github.com/users/ggaaooppeenngg/events{/privacy}",
                "received_events_url": "https://api.github.com/users/ggaaooppeenngg/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 831707000,
                    "node_id": "MDU6TGFiZWw4MzE3MDcwMDA=",
                    "url": "https://api.github.com/repos/golang/go/labels/cla:%20yes",
                    "name": "cla: yes",
                    "color": "0e8a16",
                    "default": false,
                    "description": "Used by googlebot to label PRs as having a valid CLA. The text of this label should not change."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 12,
            "created_at": "2021-01-15T08:58:39Z",
            "updated_at": "2021-06-21T17:03:47Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "active_lock_reason": null,
            "draft": false,
            "pull_request": {
                "url": "https://api.github.com/repos/golang/go/pulls/43716",
                "html_url": "https://github.com/golang/go/pull/43716",
                "diff_url": "https://github.com/golang/go/pull/43716.diff",
                "patch_url": "https://github.com/golang/go/pull/43716.patch"
            },
            "body": "At every iteration of decoder.Token, scaner.bytes does not increment\r\nwhen it meets spaces and other non value token.\r\n\r\nFixes #34543.",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/45628",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/45628/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/45628/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/45628/events",
            "html_url": "https://github.com/golang/go/issues/45628",
            "id": 861052267,
            "node_id": "MDU6SXNzdWU4NjEwNTIyNjc=",
            "number": 45628,
            "title": "encoding/xml: add Decoder.InputPos",
            "user": {
                "login": "pgundlach",
                "id": 209434,
                "node_id": "MDQ6VXNlcjIwOTQzNA==",
                "avatar_url": "https://avatars.githubusercontent.com/u/209434?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/pgundlach",
                "html_url": "https://github.com/pgundlach",
                "followers_url": "https://api.github.com/users/pgundlach/followers",
                "following_url": "https://api.github.com/users/pgundlach/following{/other_user}",
                "gists_url": "https://api.github.com/users/pgundlach/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/pgundlach/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pgundlach/subscriptions",
                "organizations_url": "https://api.github.com/users/pgundlach/orgs",
                "repos_url": "https://api.github.com/users/pgundlach/repos",
                "events_url": "https://api.github.com/users/pgundlach/events{/privacy}",
                "received_events_url": "https://api.github.com/users/pgundlach/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373399998,
                    "node_id": "MDU6TGFiZWwzNzMzOTk5OTg=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsFix",
                    "name": "NeedsFix",
                    "color": "ededed",
                    "default": false,
                    "description": "The path to resolution is known, but the work has not been done."
                },
                {
                    "id": 236419512,
                    "node_id": "MDU6TGFiZWwyMzY0MTk1MTI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal",
                    "name": "Proposal",
                    "color": "ededed",
                    "default": false,
                    "description": null
                },
                {
                    "id": 246350233,
                    "node_id": "MDU6TGFiZWwyNDYzNTAyMzM=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal-Accepted",
                    "name": "Proposal-Accepted",
                    "color": "009800",
                    "default": false,
                    "description": null
                },
                {
                    "id": 1510502199,
                    "node_id": "MDU6TGFiZWwxNTEwNTAyMTk5",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal-FinalCommentPeriod",
                    "name": "Proposal-FinalCommentPeriod",
                    "color": "b60205",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/201",
                "html_url": "https://github.com/golang/go/milestone/201",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/201/labels",
                "id": 6440853,
                "node_id": "MDk6TWlsZXN0b25lNjQ0MDg1Mw==",
                "number": 201,
                "title": "Go1.18",
                "description": null,
                "creator": {
                    "login": "bcmills",
                    "id": 5200974,
                    "node_id": "MDQ6VXNlcjUyMDA5NzQ=",
                    "avatar_url": "https://avatars.githubusercontent.com/u/5200974?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/bcmills",
                    "html_url": "https://github.com/bcmills",
                    "followers_url": "https://api.github.com/users/bcmills/followers",
                    "following_url": "https://api.github.com/users/bcmills/following{/other_user}",
                    "gists_url": "https://api.github.com/users/bcmills/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/bcmills/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/bcmills/subscriptions",
                    "organizations_url": "https://api.github.com/users/bcmills/orgs",
                    "repos_url": "https://api.github.com/users/bcmills/repos",
                    "events_url": "https://api.github.com/users/bcmills/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/bcmills/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 101,
                "closed_issues": 13,
                "state": "open",
                "created_at": "2021-02-16T21:08:35Z",
                "updated_at": "2021-06-24T23:05:35Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 22,
            "created_at": "2021-04-19T08:34:12Z",
            "updated_at": "2021-05-13T14:49:48Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/var/folders/md/l2nnr5490tq114003qtxfnk40000gn/T//gocache\"\r\nGOENV=\"/Users/patrick/Library/Application Support/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOINSECURE=\"\"\r\nGOMODCACHE=\"/Users/patrick/go/pkg/mod\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/patrick/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/Cellar/go/1.16/libexec\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.16/libexec/pkg/tool/darwin_amd64\"\r\nGOVCS=\"\"\r\nGOVERSION=\"go1.16\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/Users/patrick/prog/go/xml/xmltolua/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -arch x86_64 -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/md/l2nnr5490tq114003qtxfnk40000gn/T/go-build1589123002=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nI use the package `encoding/xml` for a programming language similar to XSLT. Now I'd like to provide user feedback if something is semantically wrong with the input. For example when the user has forgotten to initialise a variable. In that case the XML syntax is correct.\r\n\r\nI want to tell the user \"you have a problem in line xyz\" but I cannot get the current line from the XML decoder. Thus I propose to add a function to the XML package similar to `func (d *Decoder) InputOffset() int64 { return d.offset }`:\r\n\r\n```go\r\n// InputLine retuns the line of the current decoder position.\r\n// The line gives the location of the end of the most recently returned token.\r\nfunc (d *Decoder) InputLine() int {\r\n\treturn d.line\r\n}\r\n```\r\n\r\nwhere a test case would be something like this:\r\n\r\n```go\r\nfunc TestInputLineNum(t *testing.T) {\r\n\ttestInput := \"<P>Fo\\no<P>\\n<P>Bar</P>\\n\"\r\n\tlinenumbers := []int{1, 2, 2, 3, 3, 3, 3, 4}\r\n\td := NewDecoder(strings.NewReader(testInput))\r\n\tvar err error\r\n\tfor c := 0; c < len(linenumbers); c++ {\r\n\t\t_, err = d.Token()\r\n\t\tif err != nil {\r\n\t\t\tt.Errorf(\"expected no error on d.Token()\")\r\n\t\t}\r\n\t\tif have, want := d.InputLine(), linenumbers[c]; have != want {\r\n\t\t\tt.Errorf(\"d.InputLine() = %d, want %d (c = %d)\", have, want, c)\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nI'd be happy to provide a pull request, but since this function is so trivial, I just post it here as well.",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/42571",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/42571/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/42571/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/42571/events",
            "html_url": "https://github.com/golang/go/issues/42571",
            "id": 742020100,
            "node_id": "MDU6SXNzdWU3NDIwMjAxMDA=",
            "number": 42571,
            "title": "encoding/json: clarify Decoder.InputOffset semantics",
            "user": {
                "login": "dsnet",
                "id": 6354026,
                "node_id": "MDQ6VXNlcjYzNTQwMjY=",
                "avatar_url": "https://avatars.githubusercontent.com/u/6354026?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dsnet",
                "html_url": "https://github.com/dsnet",
                "followers_url": "https://api.github.com/users/dsnet/followers",
                "following_url": "https://api.github.com/users/dsnet/following{/other_user}",
                "gists_url": "https://api.github.com/users/dsnet/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/dsnet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dsnet/subscriptions",
                "organizations_url": "https://api.github.com/users/dsnet/orgs",
                "repos_url": "https://api.github.com/users/dsnet/repos",
                "events_url": "https://api.github.com/users/dsnet/events{/privacy}",
                "received_events_url": "https://api.github.com/users/dsnet/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 150880209,
                    "node_id": "MDU6TGFiZWwxNTA4ODAyMDk=",
                    "url": "https://api.github.com/repos/golang/go/labels/Documentation",
                    "name": "Documentation",
                    "color": "aaffaa",
                    "default": false,
                    "description": null
                },
                {
                    "id": 373402289,
                    "node_id": "MDU6TGFiZWwzNzM0MDIyODk=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
                    "name": "NeedsInvestigation",
                    "color": "ededed",
                    "default": false,
                    "description": "Someone must examine and confirm this is a valid issue and not a duplicate of an existing one."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 1,
            "created_at": "2020-11-13T00:09:09Z",
            "updated_at": "2020-11-13T20:53:19Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "active_lock_reason": null,
            "body": "The documentation on [`Decoder.InputOffset`](https://golang.org/pkg/encoding/json/#Decoder.InputOffset) currently says:\r\n>The offset gives the location of the end of the most recently returned token and the beginning of the next token.\r\n\r\nThis explanation is somewhat incorrect since the offset cannot be a single value if there are intervening whitespace in-between two JSON tokens. Furthermore, the `json` package implicitly handles colons and commas, which are technically JSON tokens according to RFC 7159, section 2. May the offset ever be past these implicit colons and commas, or will it always be before them? The \"token\" in this context is a somewhat ambiguous.\r\n\r\nThe documentation should be clarified to say one of the following:\r\n* The offset may be between the end of the most recently returned token (exclusive), and before the beginning of the next token that may be returned (inclusive).\r\n* The offset points to the next character immediately after the most recently returned token.\r\n* The offset points to the first character of the next token that may be returned.\r\n\r\nI chose the phrase \"may be returned\" to indicate that colons and commas aren't included since they aren't ever returned by the `json` API. I haven't checked the implementation yet to see what it actually returns.\r\n\r\nThe first definition gives more flexibility to how the `Decoder` may actually be implemented. The latter two definitions gives the user more assurance about what `InputOffset` actually means.\r\n\r\nUpdates #29688",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/11046",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/11046/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/11046/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/11046/events",
            "html_url": "https://github.com/golang/go/issues/11046",
            "id": 84732835,
            "node_id": "MDU6SXNzdWU4NDczMjgzNQ==",
            "number": 11046,
            "title": "encoding/json: Decoder internally buffers full input",
            "user": {
                "login": "kurin",
                "id": 90267,
                "node_id": "MDQ6VXNlcjkwMjY3",
                "avatar_url": "https://avatars.githubusercontent.com/u/90267?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/kurin",
                "html_url": "https://github.com/kurin",
                "followers_url": "https://api.github.com/users/kurin/followers",
                "following_url": "https://api.github.com/users/kurin/following{/other_user}",
                "gists_url": "https://api.github.com/users/kurin/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/kurin/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kurin/subscriptions",
                "organizations_url": "https://api.github.com/users/kurin/orgs",
                "repos_url": "https://api.github.com/users/kurin/repos",
                "events_url": "https://api.github.com/users/kurin/events{/privacy}",
                "received_events_url": "https://api.github.com/users/kurin/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 150880191,
                    "node_id": "MDU6TGFiZWwxNTA4ODAxOTE=",
                    "url": "https://api.github.com/repos/golang/go/labels/Performance",
                    "name": "Performance",
                    "color": "ededed",
                    "default": false,
                    "description": null
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/6",
                "html_url": "https://github.com/golang/go/milestone/6",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/6/labels",
                "id": 1055141,
                "node_id": "MDk6TWlsZXN0b25lMTA1NTE0MQ==",
                "number": 6,
                "title": "Unplanned",
                "description": "No plan to fix in any specific release.\r\n",
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 2024,
                "closed_issues": 2059,
                "state": "open",
                "created_at": "2015-04-06T20:47:19Z",
                "updated_at": "2021-06-24T00:15:24Z",
                "due_on": "2099-12-31T08:00:00Z",
                "closed_at": null
            },
            "comments": 8,
            "created_at": "2015-06-03T19:25:08Z",
            "updated_at": "2017-10-26T16:30:14Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "When using the JSON package, if I encode a struct like\n\n``` go\ntype Data struct {\n    Count int\n    Names []string\n}\n```\n\nand then decode it into\n\n``` go\ntype SmallData struct {\n    Count int\n}\n```\n\nit will still allocate memory for the list of names, even though it just gets thrown away.  This becomes an annoyance when I have several multigigabyte JSON files like this.  It would be neat if the JSON parser could identify what fields it cares about, or somehow be told what fields to ignore, and chuck them.\n",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/32779",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/32779/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/32779/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/32779/events",
            "html_url": "https://github.com/golang/go/issues/32779",
            "id": 460643619,
            "node_id": "MDU6SXNzdWU0NjA2NDM2MTk=",
            "number": 32779,
            "title": "encoding/json: memoize strings during decode",
            "user": {
                "login": "rsc",
                "id": 104030,
                "node_id": "MDQ6VXNlcjEwNDAzMA==",
                "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/rsc",
                "html_url": "https://github.com/rsc",
                "followers_url": "https://api.github.com/users/rsc/followers",
                "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                "organizations_url": "https://api.github.com/users/rsc/orgs",
                "repos_url": "https://api.github.com/users/rsc/repos",
                "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                "received_events_url": "https://api.github.com/users/rsc/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 236419512,
                    "node_id": "MDU6TGFiZWwyMzY0MTk1MTI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal",
                    "name": "Proposal",
                    "color": "ededed",
                    "default": false,
                    "description": null
                },
                {
                    "id": 246350233,
                    "node_id": "MDU6TGFiZWwyNDYzNTAyMzM=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal-Accepted",
                    "name": "Proposal-Accepted",
                    "color": "009800",
                    "default": false,
                    "description": null
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 53,
            "created_at": "2019-06-25T21:08:30Z",
            "updated_at": "2021-03-12T01:44:01Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "active_lock_reason": null,
            "body": "Part of the motivation for #32593 is the observation in json-iterator/go#376 that when you json decode, many of the same strings appear over and over in the JSON and get copied and reconstructed in the result over and over as well. \n\nWe do _not_ want to make the JSON coalesce all the allocated strings into one giant buffer, because then holding on to just one of them holds onto the entire thing.\n\nBut it might make sense to add to the decoder state a simple map[[]byte]string and remember which specific byte slices we've already converted to string and reuse those allocated strings instead of doing the same conversions again in a particular Decode or Unmarshal operation. \n\nIt's unclear to me whether the map in a Decoder should persist between Decode operations. Probably? That will affect users who put Decoders in a pool or something like that, though. (Solution: don't put decoders in pools.)",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/34543",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/34543/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/34543/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/34543/events",
            "html_url": "https://github.com/golang/go/issues/34543",
            "id": 498550359,
            "node_id": "MDU6SXNzdWU0OTg1NTAzNTk=",
            "number": 34543,
            "title": "encoding/json: Unmarshal & json.(*Decoder).Token report different values for SyntaxError.Offset for the same input",
            "user": {
                "login": "maxatome",
                "id": 262880,
                "node_id": "MDQ6VXNlcjI2Mjg4MA==",
                "avatar_url": "https://avatars.githubusercontent.com/u/262880?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/maxatome",
                "html_url": "https://github.com/maxatome",
                "followers_url": "https://api.github.com/users/maxatome/followers",
                "following_url": "https://api.github.com/users/maxatome/following{/other_user}",
                "gists_url": "https://api.github.com/users/maxatome/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/maxatome/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/maxatome/subscriptions",
                "organizations_url": "https://api.github.com/users/maxatome/orgs",
                "repos_url": "https://api.github.com/users/maxatome/repos",
                "events_url": "https://api.github.com/users/maxatome/events{/privacy}",
                "received_events_url": "https://api.github.com/users/maxatome/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373402289,
                    "node_id": "MDU6TGFiZWwzNzM0MDIyODk=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
                    "name": "NeedsInvestigation",
                    "color": "ededed",
                    "default": false,
                    "description": "Someone must examine and confirm this is a valid issue and not a duplicate of an existing one."
                },
                {
                    "id": 150880243,
                    "node_id": "MDU6TGFiZWwxNTA4ODAyNDM=",
                    "url": "https://api.github.com/repos/golang/go/labels/help%20wanted",
                    "name": "help wanted",
                    "color": "fbca04",
                    "default": true,
                    "description": null
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/6",
                "html_url": "https://github.com/golang/go/milestone/6",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/6/labels",
                "id": 1055141,
                "node_id": "MDk6TWlsZXN0b25lMTA1NTE0MQ==",
                "number": 6,
                "title": "Unplanned",
                "description": "No plan to fix in any specific release.\r\n",
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 2024,
                "closed_issues": 2059,
                "state": "open",
                "created_at": "2015-04-06T20:47:19Z",
                "updated_at": "2021-06-24T00:15:24Z",
                "due_on": "2099-12-31T08:00:00Z",
                "closed_at": null
            },
            "comments": 4,
            "created_at": "2019-09-25T22:13:24Z",
            "updated_at": "2021-01-15T09:03:19Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.13 freebsd/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/max/.cache/go-build\"\r\nGOENV=\"/home/max/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"freebsd\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"freebsd\"\r\nGOPATH=\"/home/max/Projet/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/freebsd_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build707409473=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\nhttps://play.golang.org/p/zkVEGITpYIo\r\n\r\n### What did you expect to see?\r\n\r\nThe same Offset for the two error cases, as it is the same input.\r\n\r\n### What did you see instead?\r\n\r\nDifferent Offset.",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/36225",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/36225/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/36225/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/36225/events",
            "html_url": "https://github.com/golang/go/issues/36225",
            "id": 540610786,
            "node_id": "MDU6SXNzdWU1NDA2MTA3ODY=",
            "number": 36225,
            "title": "encoding/json: the Decoder.Decode API lends itself to misuse",
            "user": {
                "login": "dsnet",
                "id": 6354026,
                "node_id": "MDQ6VXNlcjYzNTQwMjY=",
                "avatar_url": "https://avatars.githubusercontent.com/u/6354026?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dsnet",
                "html_url": "https://github.com/dsnet",
                "followers_url": "https://api.github.com/users/dsnet/followers",
                "following_url": "https://api.github.com/users/dsnet/following{/other_user}",
                "gists_url": "https://api.github.com/users/dsnet/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/dsnet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dsnet/subscriptions",
                "organizations_url": "https://api.github.com/users/dsnet/orgs",
                "repos_url": "https://api.github.com/users/dsnet/repos",
                "events_url": "https://api.github.com/users/dsnet/events{/privacy}",
                "received_events_url": "https://api.github.com/users/dsnet/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373401956,
                    "node_id": "MDU6TGFiZWwzNzM0MDE5NTY=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsDecision",
                    "name": "NeedsDecision",
                    "color": "ededed",
                    "default": false,
                    "description": "Feedback is required from experts, contributors, and/or the community before a change can be made."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 22,
            "created_at": "2019-12-19T22:26:12Z",
            "updated_at": "2020-10-16T16:14:05Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "active_lock_reason": null,
            "body": "I'm observing the existence of several production servers that are buggy because the `json.Decoder.Decode` API lends itself to misuse.\r\n\r\nConsider the following:\r\n```go\r\nr := strings.NewReader(\"{} bad data\")\r\n\r\nvar m map[string]interface{}\r\nd := json.NewDecoder(r)\r\nif err := d.Decode(&m); err != nil {\r\n\tpanic(err) // not triggered\r\n}\r\n```\r\n\r\n`json.NewDecoder` is often used because the user has an `io.Reader` on hand or wants to configure some of the options on `json.Decoder`. However, the common case is that the user only wants to decode a *single* JSON value. As it stands the API does not make the common case easy since `Decode` is designed with the assumption that the user will continue to decode more JSON values, which is rarely the case.\r\n\r\nThe code above executes just fine without reporting an error and silently allows the decoder to silently accept bad input without reporting any problems.",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/5901",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/5901/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/5901/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/5901/events",
            "html_url": "https://github.com/golang/go/issues/5901",
            "id": 51284360,
            "node_id": "MDU6SXNzdWU1MTI4NDM2MA==",
            "number": 5901,
            "title": "encoding/json: allow per-Encoder/per-Decoder registration of marshal/unmarshal functions",
            "user": {
                "login": "rsc",
                "id": 104030,
                "node_id": "MDQ6VXNlcjEwNDAzMA==",
                "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/rsc",
                "html_url": "https://github.com/rsc",
                "followers_url": "https://api.github.com/users/rsc/followers",
                "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                "organizations_url": "https://api.github.com/users/rsc/orgs",
                "repos_url": "https://api.github.com/users/rsc/repos",
                "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                "received_events_url": "https://api.github.com/users/rsc/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 236419512,
                    "node_id": "MDU6TGFiZWwyMzY0MTk1MTI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal",
                    "name": "Proposal",
                    "color": "ededed",
                    "default": false,
                    "description": null
                },
                {
                    "id": 246350233,
                    "node_id": "MDU6TGFiZWwyNDYzNTAyMzM=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal-Accepted",
                    "name": "Proposal-Accepted",
                    "color": "009800",
                    "default": false,
                    "description": null
                },
                {
                    "id": 626114143,
                    "node_id": "MDU6TGFiZWw2MjYxMTQxNDM=",
                    "url": "https://api.github.com/repos/golang/go/labels/early-in-cycle",
                    "name": "early-in-cycle",
                    "color": "505050",
                    "default": false,
                    "description": "A change that should be done early in the 3 month dev cycle."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 40,
            "created_at": "2013-07-17T16:39:15Z",
            "updated_at": "2021-05-04T00:29:24Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "active_lock_reason": null,
            "body": "<pre>For example, if a user wants to marshal net.IP with custom code, we should provide a way\nto do that, probably a method on *Encoder. Similarly for *Decoder.\n\nSame for encoding/xml.</pre>\n",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/29035",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/29035/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/29035/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/29035/events",
            "html_url": "https://github.com/golang/go/issues/29035",
            "id": 386147072,
            "node_id": "MDU6SXNzdWUzODYxNDcwNzI=",
            "number": 29035,
            "title": "proposal: encoding/json: add error var to compare  the returned error when using json.Decoder.DisallowUnknownFields()",
            "user": {
                "login": "jaswdr",
                "id": 6409113,
                "node_id": "MDQ6VXNlcjY0MDkxMTM=",
                "avatar_url": "https://avatars.githubusercontent.com/u/6409113?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jaswdr",
                "html_url": "https://github.com/jaswdr",
                "followers_url": "https://api.github.com/users/jaswdr/followers",
                "following_url": "https://api.github.com/users/jaswdr/following{/other_user}",
                "gists_url": "https://api.github.com/users/jaswdr/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jaswdr/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jaswdr/subscriptions",
                "organizations_url": "https://api.github.com/users/jaswdr/orgs",
                "repos_url": "https://api.github.com/users/jaswdr/repos",
                "events_url": "https://api.github.com/users/jaswdr/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jaswdr/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 236419512,
                    "node_id": "MDU6TGFiZWwyMzY0MTk1MTI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal",
                    "name": "Proposal",
                    "color": "ededed",
                    "default": false,
                    "description": null
                },
                {
                    "id": 477156222,
                    "node_id": "MDU6TGFiZWw0NzcxNTYyMjI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal-Hold",
                    "name": "Proposal-Hold",
                    "color": "fbca04",
                    "default": false,
                    "description": null
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/30",
                "html_url": "https://github.com/golang/go/milestone/30",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/30/labels",
                "id": 1373555,
                "node_id": "MDk6TWlsZXN0b25lMTM3MzU1NQ==",
                "number": 30,
                "title": "Proposal",
                "description": "Proposals that are pending (not yet accepted/rejected).\r\nSee https://golang.org/s/proposal-process.\r\n",
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 499,
                "closed_issues": 1560,
                "state": "open",
                "created_at": "2015-10-24T01:40:49Z",
                "updated_at": "2021-06-25T01:55:14Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 9,
            "created_at": "2018-11-30T11:21:31Z",
            "updated_at": "2020-06-26T01:16:44Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\n\r\ngo version devel +ffc7bc55f3 Tue Oct 9 10:35:08 2018 +0000 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\n\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/jaswdr/.cache/go-build\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/jaswdr\"\r\nGOPROXY=\"\"\r\nGORACE=\"\"\r\nGOROOT=\"/home/jaswdr/go\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/home/jaswdr/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build749620831=/tmp/go-build -gno-record-gcc-switches\"\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"log\"\r\n\t\"bytes\"\r\n\t\"encoding/json\"\r\n)\r\n\r\ntype T struct {\r\n\tBar string `json:\"bar\"`\r\n}\r\n\r\nfunc main() {\r\n\tstr := []byte(`{\"foo\":\"bar\"}`)\r\n\tobj := new(T)\r\n\t\r\n\tdec := json.NewDecoder(bytes.NewReader(str))\r\n\tdec.DisallowUnknownFields()\r\n\terr := dec.Decode(&obj)\r\n\tif err != nil { // Whant to check if the specific unkown fields error happen\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\t\r\n\tlog.Println(obj)\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nSome way to check if the error happen.\r\n\r\n```go\r\n...\r\nif err == json.UnknownFieldsError {\r\n ...\r\n}\r\n...\r\n```\r\n\r\n### What did you see instead?\r\n\r\nNo way to do this instead of checking the error string\r\n\r\n---\r\n\r\nIf this is accepted I really want to work on it.",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/43401",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/43401/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/43401/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/43401/events",
            "html_url": "https://github.com/golang/go/issues/43401",
            "id": 775391842,
            "node_id": "MDU6SXNzdWU3NzUzOTE4NDI=",
            "number": 43401,
            "title": "proposal: encoding/csv: add Reader.InputOffset method",
            "user": {
                "login": "opennota",
                "id": 5520115,
                "node_id": "MDQ6VXNlcjU1MjAxMTU=",
                "avatar_url": "https://avatars.githubusercontent.com/u/5520115?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/opennota",
                "html_url": "https://github.com/opennota",
                "followers_url": "https://api.github.com/users/opennota/followers",
                "following_url": "https://api.github.com/users/opennota/following{/other_user}",
                "gists_url": "https://api.github.com/users/opennota/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/opennota/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/opennota/subscriptions",
                "organizations_url": "https://api.github.com/users/opennota/orgs",
                "repos_url": "https://api.github.com/users/opennota/repos",
                "events_url": "https://api.github.com/users/opennota/events{/privacy}",
                "received_events_url": "https://api.github.com/users/opennota/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 236419512,
                    "node_id": "MDU6TGFiZWwyMzY0MTk1MTI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal",
                    "name": "Proposal",
                    "color": "ededed",
                    "default": false,
                    "description": null
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/30",
                "html_url": "https://github.com/golang/go/milestone/30",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/30/labels",
                "id": 1373555,
                "node_id": "MDk6TWlsZXN0b25lMTM3MzU1NQ==",
                "number": 30,
                "title": "Proposal",
                "description": "Proposals that are pending (not yet accepted/rejected).\r\nSee https://golang.org/s/proposal-process.\r\n",
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 499,
                "closed_issues": 1560,
                "state": "open",
                "created_at": "2015-10-24T01:40:49Z",
                "updated_at": "2021-06-25T01:55:14Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 2,
            "created_at": "2020-12-28T13:07:42Z",
            "updated_at": "2020-12-28T17:58:47Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "```\r\n// InputOffset returns the input stream byte offset of the current reader\r\n// position. The offset gives the location of the end of the most recently\r\n// read row and the beginning of the next row. \r\nfunc (r *Reader) InputOffset() int64\r\n```\r\n\r\n`encoding/json.Decoder` already has a method like this:\r\n\r\nhttps://golang.org/pkg/encoding/json/#Decoder.InputOffset",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/31701",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/31701/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/31701/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/31701/events",
            "html_url": "https://github.com/golang/go/issues/31701",
            "id": 437840697,
            "node_id": "MDU6SXNzdWU0Mzc4NDA2OTc=",
            "number": 31701,
            "title": "encoding/json: second decode after error impossible",
            "user": {
                "login": "lr1980",
                "id": 1901770,
                "node_id": "MDQ6VXNlcjE5MDE3NzA=",
                "avatar_url": "https://avatars.githubusercontent.com/u/1901770?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/lr1980",
                "html_url": "https://github.com/lr1980",
                "followers_url": "https://api.github.com/users/lr1980/followers",
                "following_url": "https://api.github.com/users/lr1980/following{/other_user}",
                "gists_url": "https://api.github.com/users/lr1980/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/lr1980/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lr1980/subscriptions",
                "organizations_url": "https://api.github.com/users/lr1980/orgs",
                "repos_url": "https://api.github.com/users/lr1980/repos",
                "events_url": "https://api.github.com/users/lr1980/events{/privacy}",
                "received_events_url": "https://api.github.com/users/lr1980/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373540105,
                    "node_id": "MDU6TGFiZWwzNzM1NDAxMDU=",
                    "url": "https://api.github.com/repos/golang/go/labels/FeatureRequest",
                    "name": "FeatureRequest",
                    "color": "bfd4f2",
                    "default": false,
                    "description": null
                },
                {
                    "id": 373402289,
                    "node_id": "MDU6TGFiZWwzNzM0MDIyODk=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
                    "name": "NeedsInvestigation",
                    "color": "ededed",
                    "default": false,
                    "description": "Someone must examine and confirm this is a valid issue and not a duplicate of an existing one."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 4,
            "created_at": "2019-04-26T20:50:17Z",
            "updated_at": "2020-11-30T15:33:56Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.12.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nyes\r\n\r\n### What did you do?\r\n\r\nRead a byte stream with multiple JSON's. The first has a syntax error.\r\n\r\n### What did you expect to see?\r\n\r\nI expected \"Decode\" to save the position and continue working after the error. Without a syntax error, it works as expected...\r\n\r\n### What did you see instead?\r\n\r\nIt's impossible to decode a second time after a error, e.g.:\r\nhttps://play.golang.org/p/0Z-lz_Wj9D7",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/14750",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/14750/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/14750/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/14750/events",
            "html_url": "https://github.com/golang/go/issues/14750",
            "id": 139880053,
            "node_id": "MDU6SXNzdWUxMzk4ODAwNTM=",
            "number": 14750,
            "title": "encoding/json: parser ignores the case of member names",
            "user": {
                "login": "cyberphone",
                "id": 8044211,
                "node_id": "MDQ6VXNlcjgwNDQyMTE=",
                "avatar_url": "https://avatars.githubusercontent.com/u/8044211?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cyberphone",
                "html_url": "https://github.com/cyberphone",
                "followers_url": "https://api.github.com/users/cyberphone/followers",
                "following_url": "https://api.github.com/users/cyberphone/following{/other_user}",
                "gists_url": "https://api.github.com/users/cyberphone/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cyberphone/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cyberphone/subscriptions",
                "organizations_url": "https://api.github.com/users/cyberphone/orgs",
                "repos_url": "https://api.github.com/users/cyberphone/repos",
                "events_url": "https://api.github.com/users/cyberphone/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cyberphone/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373401956,
                    "node_id": "MDU6TGFiZWwzNzM0MDE5NTY=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsDecision",
                    "name": "NeedsDecision",
                    "color": "ededed",
                    "default": false,
                    "description": "Feedback is required from experts, contributors, and/or the community before a change can be made."
                },
                {
                    "id": 150880219,
                    "node_id": "MDU6TGFiZWwxNTA4ODAyMTk=",
                    "url": "https://api.github.com/repos/golang/go/labels/Security",
                    "name": "Security",
                    "color": "D93F0B",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 39,
            "created_at": "2016-03-10T13:04:44Z",
            "updated_at": "2021-05-13T17:19:59Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "1. What version of Go are you using? `5.3`\n2. What operating system and processor architecture are you using? `amd64,windows`\n3. What did you do?\n   Read this: https://mailarchive.ietf.org/arch/msg/json/Ju-bwuRv-bq9IuOGzwqlV3aU9XE\n4. What did you expect to see?\n   ...\n5. What did you see instead?\n   ...\n",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/40128",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/40128/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/40128/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/40128/events",
            "html_url": "https://github.com/golang/go/issues/40128",
            "id": 653849793,
            "node_id": "MDU6SXNzdWU2NTM4NDk3OTM=",
            "number": 40128,
            "title": "proposal: encoding/json: garbage-free reading of tokens",
            "user": {
                "login": "rogpeppe",
                "id": 66491,
                "node_id": "MDQ6VXNlcjY2NDkx",
                "avatar_url": "https://avatars.githubusercontent.com/u/66491?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/rogpeppe",
                "html_url": "https://github.com/rogpeppe",
                "followers_url": "https://api.github.com/users/rogpeppe/followers",
                "following_url": "https://api.github.com/users/rogpeppe/following{/other_user}",
                "gists_url": "https://api.github.com/users/rogpeppe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/rogpeppe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rogpeppe/subscriptions",
                "organizations_url": "https://api.github.com/users/rogpeppe/orgs",
                "repos_url": "https://api.github.com/users/rogpeppe/repos",
                "events_url": "https://api.github.com/users/rogpeppe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/rogpeppe/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 236419512,
                    "node_id": "MDU6TGFiZWwyMzY0MTk1MTI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal",
                    "name": "Proposal",
                    "color": "ededed",
                    "default": false,
                    "description": null
                },
                {
                    "id": 477156222,
                    "node_id": "MDU6TGFiZWw0NzcxNTYyMjI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal-Hold",
                    "name": "Proposal-Hold",
                    "color": "fbca04",
                    "default": false,
                    "description": null
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/30",
                "html_url": "https://github.com/golang/go/milestone/30",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/30/labels",
                "id": 1373555,
                "node_id": "MDk6TWlsZXN0b25lMTM3MzU1NQ==",
                "number": 30,
                "title": "Proposal",
                "description": "Proposals that are pending (not yet accepted/rejected).\r\nSee https://golang.org/s/proposal-process.\r\n",
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 499,
                "closed_issues": 1560,
                "state": "open",
                "created_at": "2015-10-24T01:40:49Z",
                "updated_at": "2021-06-25T01:55:14Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 16,
            "created_at": "2020-07-09T07:58:19Z",
            "updated_at": "2020-12-02T19:04:29Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "active_lock_reason": null,
            "body": "As @bradfitz noted in the reviews of the original API, the `Decoder.ReadToken` API [is a garbage factory](https://go-review.googlesource.com/c/go/+/11651/2/src/encoding/json/stream.go#279). Although, as @rsc noted at the time, \"a clean API ... is more important here. I expect people to use it to get to the position they want in the stream and then call Decode\", the inefficiency is a problem in practice for anyone that wishes to use the encoding/json tokenizer as a basis for some other kind of decoder.\r\n\r\nDave Cheney's  [\"Building a high performance JSON parser\"](https://dave.cheney.net/high-performance-json.html) details some of the issues involved. He comes to the conclusion that the interface-based nature of [json.Token](https://golang.org/pkg/encoding/json/#Token) is a fundamental obstacle. I like the current interface-based API, but it does indeed make it impossible to return arbitrary tokens without creating garbage. Dave suggests [a new `Scanner` API](https://dave.cheney.net/high-performance-json.html#_scanning), somewhat more complex, that is also not backwardly compatible with the current API in encoding/json.\r\n\r\nI propose instead that the following method be added to the `encoding/json` package:\r\n\r\n```\r\n// TokenBytes is like Token, except that for strings and numbers, it returns\r\n// a static Token value with the actual data payload in the []byte parameter,\r\n// which is only valid until the next call to Token or TokenBytes or Decode.\r\n// For strings, the returned Token will be \"\"; for a number, it will be\r\n// Number(\"0\"); for all other kinds of token, the Token will be returned as by\r\n// Token method and the []byte value will be nil.\r\n//\r\n// This is more efficient than using Token because it avoids the\r\n// allocations required by that API.\r\nfunc (dec *Decoder) TokenBytes() (Token, []byte, error)\r\n```\r\n\r\n`Token` can be implemented in terms of `TokenBytes` as follows:\r\n\r\n```\r\nfunc (dec *Decoder) Token() (Token, error) {\r\n\ttok, data, err := dec.TokenBytes()\r\n\tif err != nil || data == nil {\r\n\t\treturn tok, err\r\n\t}\r\n\tswitch tok {\r\n\tcase \"\":\r\n\t\treturn string(data)\r\n\tcase Number(0):\r\n\t\treturn Number(data)\r\n\t}\r\n\tpanic(\"unreachable\")\r\n}\r\n```\r\n\r\n## Discussion\r\n\r\nThis proposal relies on the observation that the `Decoder.Token` API only generates garbage for two kinds of tokens: numbers and strings. For all other token types, no garbage need be generated, as small numbers (`json.Delim` and bool) do not incur an allocation when boxed in an interface.\r\n\r\nIt maintains the current API as-is. Users can opt-in to the new API if they require efficiency at some risk of incorrectness (the caller could hold onto the data slice after the next call to Decode). The cognitive overhead of `TokenBytes` is arguably low because of its similarity to the existing API.\r\n\r\nIf [this proposal](https://github.com/golang/go/issues/40127) is accepted, an `Encoder.EncodeTokenBytes` could easily be added to provide garbage-free streaming JSON generation too.\r\n\r\n",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/40982",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/40982/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/40982/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/40982/events",
            "html_url": "https://github.com/golang/go/issues/40982",
            "id": 684067607,
            "node_id": "MDU6SXNzdWU2ODQwNjc2MDc=",
            "number": 40982,
            "title": "encoding/json: use different error type for unknown field if they are disallowed ",
            "user": {
                "login": "Segflow",
                "id": 2049730,
                "node_id": "MDQ6VXNlcjIwNDk3MzA=",
                "avatar_url": "https://avatars.githubusercontent.com/u/2049730?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Segflow",
                "html_url": "https://github.com/Segflow",
                "followers_url": "https://api.github.com/users/Segflow/followers",
                "following_url": "https://api.github.com/users/Segflow/following{/other_user}",
                "gists_url": "https://api.github.com/users/Segflow/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Segflow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Segflow/subscriptions",
                "organizations_url": "https://api.github.com/users/Segflow/orgs",
                "repos_url": "https://api.github.com/users/Segflow/repos",
                "events_url": "https://api.github.com/users/Segflow/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Segflow/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373540105,
                    "node_id": "MDU6TGFiZWwzNzM1NDAxMDU=",
                    "url": "https://api.github.com/repos/golang/go/labels/FeatureRequest",
                    "name": "FeatureRequest",
                    "color": "bfd4f2",
                    "default": false,
                    "description": null
                },
                {
                    "id": 373402289,
                    "node_id": "MDU6TGFiZWwzNzM0MDIyODk=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
                    "name": "NeedsInvestigation",
                    "color": "ededed",
                    "default": false,
                    "description": "Someone must examine and confirm this is a valid issue and not a duplicate of an existing one."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 9,
            "created_at": "2020-08-22T21:07:03Z",
            "updated_at": "2020-09-29T21:53:38Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "active_lock_reason": null,
            "body": "On Go 1.15 and below, json decoder returns a generic error when unknown fields are disallowed (via `Decoder.DisallowUnknownFields`. See https://github.com/golang/go/blob/master/src/encoding/json/decode.go#L737-L739\r\n\r\nIt may be useful to return a different error type so the caller can detect when it is the case. \r\n\r\nThe only way to detect that currently is to interpret the string returned by `Error`",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/40127",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/40127/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/40127/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/40127/events",
            "html_url": "https://github.com/golang/go/issues/40127",
            "id": 653846063,
            "node_id": "MDU6SXNzdWU2NTM4NDYwNjM=",
            "number": 40127,
            "title": "encoding/json: add Encoder.EncodeToken method",
            "user": {
                "login": "rogpeppe",
                "id": 66491,
                "node_id": "MDQ6VXNlcjY2NDkx",
                "avatar_url": "https://avatars.githubusercontent.com/u/66491?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/rogpeppe",
                "html_url": "https://github.com/rogpeppe",
                "followers_url": "https://api.github.com/users/rogpeppe/followers",
                "following_url": "https://api.github.com/users/rogpeppe/following{/other_user}",
                "gists_url": "https://api.github.com/users/rogpeppe/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/rogpeppe/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rogpeppe/subscriptions",
                "organizations_url": "https://api.github.com/users/rogpeppe/orgs",
                "repos_url": "https://api.github.com/users/rogpeppe/repos",
                "events_url": "https://api.github.com/users/rogpeppe/events{/privacy}",
                "received_events_url": "https://api.github.com/users/rogpeppe/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 236419512,
                    "node_id": "MDU6TGFiZWwyMzY0MTk1MTI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal",
                    "name": "Proposal",
                    "color": "ededed",
                    "default": false,
                    "description": null
                },
                {
                    "id": 246350233,
                    "node_id": "MDU6TGFiZWwyNDYzNTAyMzM=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal-Accepted",
                    "name": "Proposal-Accepted",
                    "color": "009800",
                    "default": false,
                    "description": null
                },
                {
                    "id": 1510502199,
                    "node_id": "MDU6TGFiZWwxNTEwNTAyMTk5",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal-FinalCommentPeriod",
                    "name": "Proposal-FinalCommentPeriod",
                    "color": "b60205",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 12,
            "created_at": "2020-07-09T07:52:47Z",
            "updated_at": "2021-02-05T10:22:23Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "active_lock_reason": null,
            "body": "Currently there is a way to decode JSON token-by-token, but the JSON package does not support encoding tokens that way. It has been stated that just writing the tokens yourself is straightforward enough to do (citation needed), but it's not actually _that_ easy to do.\r\n \r\nHere's some code that streams JSON from input to output: https://play.golang.org/p/H6Xl_twRIyC. It's at least 50 lines of code to do the basic streaming functionality, it's easy to get wrong by forgetting to put a colon or a comma in the right place, and if you want indentation or HTML escaping, you have to do it yourself.\r\n \r\nI propose that we add an `EncodeToken` method to `json.Encoder`:\r\n \r\n```\r\n// EncodeToken encodes a single JSON token to the encoder. The order of\r\n// tokens must result in valid JSON syntax (as returned by the\r\n// Decoder.Token method). That is, delimiters [ ] { } must be properly\r\n// nested and matched, and object keys must be strings (but see the note\r\n// on using Encode below).\r\n//\r\n// EncodeToken returns an error if the token cannot be encoded or is\r\n// misplaced, for example because there's a delimiter mismatch, a\r\n// non-string token is passed where an object key is expected, a string\r\n// contains invalid UTF-8 or a Number isn’t formatted correctly.\r\n//\r\n// Note that it’s OK to mix calls to EncodeToken with calls to Encode.\r\n// In particular, it’s also valid to call Encode when an object key is\r\n// expected - in this case, the value is subject to the same conversion\r\n// rules as for map keys.\r\nfunc (enc *Encoder) EncodeToken(tok Token) error\r\n```\r\n \r\nThere would be no way to produce syntactically invalid output (other than truncating the output by not completing the encoded value). The Encoder would keep track of the current state in a stack internally.\r\n\r\nAn example: if we wanted to stream a large array of JSON objects, we could do:\r\n\r\n```\r\nenc.EncodeToken(json.Delim('['))\r\nfor {\r\n    enc.Encode(arrayItem)\r\n}\r\nenc.EncodeToken(json.Delim(']'))\r\n```\r\n \r\nA slightly more comprehensive example is [here](https://play.golang.org/p/QF65gjFapux)\r\n \r\nThe code to stream a set of JSON values would become considerably simpler: https://play.golang.org/p/Wec5wepCYbE\r\n \r\n## Completeness validation\r\n \r\nIt might be useful to provide callers with a final check that their encoded value is in fact complete (that is, no final closing tokens have been omitted). To do that, the following method could be provided:\r\n \r\n```\r\n// ClosingToken returns the token necessary to close the current encoding object or array.\r\n// It returns either Delim('}'), Delim(']'), or nil if there is no current object or array.\r\nfunc (enc *Encoder) ClosingToken() Token\r\n```\r\n \r\nThis method makes it straightforward to check that the object is complete (`if env.ClosingToken == nil`), but also could be used for sanity checks when developing, better errors, or to implement a Flush method that automatically closes all open objects and arrays:\r\n \r\n ```\r\nfor enc.ClosingToken() != nil {\r\n    enc.EncodeToken(enc.ClosingToken())\r\n}\r\n```\r\n \r\n ## Discussion\r\n \r\nAs with the current `Decoder.Token` implementation, `Encoder.EncodeToken` will not be particularly efficient, as it requires passing strings and numbers as strings inside an interface value. I think that this can be considered an orthogonal issue: a solution to the `Decoder.Token` garbage issue may also be applied to `Decoder.Token`. The symmetry between `Decoder.Token` and `Encoder.EncodeToken` is a useful property which makes this API easier to explain and use, and shouldn’t be discarded lightly, in my view.\r\n \r\nOnce `Encoder.Encode` is invoked, there’s no way to return to streaming mode, for example to encode a large array within a `MarshalJSON` method. This is a limitation of the `json.Marshaler` interface, and could potentially be addressed by a fix in that area.\r\n\r\nIt would _almost_ be possible to implement this without adding a method at all by changing the `Encode` method to recognize `Delim`. However, it’s currently valid to pass a `Delim` value to encode (it encodes as a number), so this would break backward compatibility. Also, it’s arguably cleaner to have a separation between the low level token API and the higher level Encode API.\r\n\r\n## Related proposals\r\n \r\nhttps://github.com/golang/go/issues/33714\r\n\r\n",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/28923",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/28923/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/28923/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/28923/events",
            "html_url": "https://github.com/golang/go/issues/28923",
            "id": 383544250,
            "node_id": "MDU6SXNzdWUzODM1NDQyNTA=",
            "number": 28923,
            "title": "encoding/json: speed up the decoding scanner",
            "user": {
                "login": "mvdan",
                "id": 3576549,
                "node_id": "MDQ6VXNlcjM1NzY1NDk=",
                "avatar_url": "https://avatars.githubusercontent.com/u/3576549?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mvdan",
                "html_url": "https://github.com/mvdan",
                "followers_url": "https://api.github.com/users/mvdan/followers",
                "following_url": "https://api.github.com/users/mvdan/following{/other_user}",
                "gists_url": "https://api.github.com/users/mvdan/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mvdan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mvdan/subscriptions",
                "organizations_url": "https://api.github.com/users/mvdan/orgs",
                "repos_url": "https://api.github.com/users/mvdan/repos",
                "events_url": "https://api.github.com/users/mvdan/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mvdan/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 150880191,
                    "node_id": "MDU6TGFiZWwxNTA4ODAxOTE=",
                    "url": "https://api.github.com/repos/golang/go/labels/Performance",
                    "name": "Performance",
                    "color": "ededed",
                    "default": false,
                    "description": null
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 11,
            "created_at": "2018-11-22T13:50:18Z",
            "updated_at": "2019-12-05T21:59:44Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "active_lock_reason": null,
            "body": "#5683 covered the overall speed issues of encoding and decoding JSON. It's now closed, since the package has gotten noticeably faster in the last few Go releases. For example, after a series of patches I sent during 1.12:\r\n\r\n```\r\nname           old time/op    new time/op    delta\r\nCodeEncoder-4    7.43ms ± 0%    5.35ms ± 1%  -28.01%  (p=0.002 n=6+6)\r\nCodeDecoder-4    30.8ms ± 1%    27.3ms ± 0%  -11.42%  (p=0.004 n=6+5)\r\n\r\nname           old speed      new speed      delta\r\nCodeEncoder-4   261MB/s ± 0%   363MB/s ± 1%  +38.91%  (p=0.002 n=6+6)\r\nCodeDecoder-4  62.9MB/s ± 1%  70.9MB/s ± 1%  +12.71%  (p=0.002 n=6+6)\r\n```\r\n\r\nNotice, however, how decoding is about five times slower than encoding. While it makes sense that decoding is more work, a 5x difference seems to point that there are some bottlenecks.\r\n\r\nHere are the encoding top 10 functions by cpu, as reported by `go test -run=- -bench=CodeEncoder -benchtime=5s -cpuprofile=cpu.out`:\r\n\r\n```\r\n      flat  flat%   sum%        cum   cum%\r\n     3.93s 10.84% 10.84%     36.07s 99.50%  encoding/json.structEncoder.encode\r\n     3.45s  9.52% 20.36%      3.92s 10.81%  strconv.formatBits\r\n     3.39s  9.35% 29.71%      4.80s 13.24%  strconv.(*extFloat).ShortestDecimal\r\n     2.50s  6.90% 36.61%      2.50s  6.90%  runtime.memmove\r\n     2.41s  6.65% 43.26%      3.18s  8.77%  encoding/json.(*encodeState).string\r\n     2.11s  5.82% 49.08%      2.11s  5.82%  strconv.fmtF\r\n     1.78s  4.91% 53.99%      3.40s  9.38%  bytes.(*Buffer).WriteString\r\n     1.36s  3.75% 57.74%         2s  5.52%  bytes.(*Buffer).WriteByte\r\n     1.34s  3.70% 61.43%      1.34s  3.70%  bytes.(*Buffer).tryGrowByReslice (inline)\r\n     1.32s  3.64% 65.08%      2.31s  6.37%  bytes.(*Buffer).Write\r\n```\r\n\r\nIt's been optimized to a point where `bytes.Buffer`, `runtime.memmove` and `strconv` all appear in the top 10, so it's pretty well optimized. I can't see any more low-hanging fruit in that top 10.\r\n\r\nAnd here are the as reported by `go test -run=- -bench=CodeDecoder -benchtime=5s -cpuprofile=cpu.out`:\r\n\r\n```\r\n      flat  flat%   sum%        cum   cum%\r\n    3190ms 10.74% 10.74%     3240ms 10.91%  encoding/json.stateInString\r\n    3150ms 10.60% 21.34%     8260ms 27.80%  encoding/json.(*Decoder).readValue\r\n    2990ms 10.06% 31.40%     7660ms 25.78%  encoding/json.(*decodeState).scanWhile\r\n    1990ms  6.70% 38.10%    21120ms 71.09%  encoding/json.(*decodeState).object\r\n    1730ms  5.82% 43.92%     1860ms  6.26%  encoding/json.stateEndValue\r\n    1550ms  5.22% 49.14%     2110ms  7.10%  encoding/json.state1\r\n    1350ms  4.54% 53.69%     1350ms  4.54%  encoding/json.unquoteBytes\r\n    1020ms  3.43% 57.12%     1080ms  3.64%  encoding/json.stateBeginValue\r\n     920ms  3.10% 60.22%     3120ms 10.50%  encoding/json.indirect\r\n     720ms  2.42% 62.64%      740ms  2.49%  encoding/json.stateBeginString\r\n```\r\n\r\nThe big difference here is that all 10 functions are in the json package itself. In particular, the scanner's `state*` functions take up half of the list, including number one. And numbers two and three, `readValue` and `scanWhile`, are also part of scanning tokens.\r\n\r\nThere's another issue about speeding up the decoder, #16212. It's about doing reflect work ahread of time, like the encoder does. However, out of that top 10, only `object` and `indirect` involve any reflect work, so I doubt that a refactor for #16212 would bring substantial gains while the scanner takes vastly more time than reflection.\r\n\r\nSo I propose that we refactor or even redesign the scanner to make it faster. The main bottleneck at the moment is the `step` function, which must be called for every decoded byte. I can imagine that it's slow for a few main reasons:\r\n\r\n* `step` is a function value, which can be nil - one nil check per byte\r\n* We can't quickly skip chunks of uninteresting bytes, such as whitespace or long quoted strings with safe characters\r\n* The calls cannot be inlined, even though many `state*` functions are very small - one call per byte\r\n\r\nThe godoc for the `step` field reads:\r\n\r\n```\r\n// The step is a func to be called to execute the next transition.\r\n// Also tried using an integer constant and a single func\r\n// with a switch, but using the func directly was 10% faster\r\n// on a 64-bit Mac Mini, and it's nicer to read.\r\n```\r\n\r\nI tried using a function switch, and even a function jump table, but neither gave noticeable speed-ups. In fact, they all made `CodeDecoder` 1-5% slower. I presume the manual jump table via a `[...]func(*scanner, byte) int` array is slow because we still can't get rid of the nil checks. I'd hope that #5496 would help here.\r\n\r\nI have a few ideas in mind to try to make the work per byte a bit faster, but I'm limited by the \"one unknown step call per byte\" design, as I tried to explain above. I understand that the current design makes the JSON scanner simpler to reason about, but I wonder if there's anything we can do to make it faster while keeping it reasonably simple.\r\n\r\nThis issue is to track small speed-ups in the scanner, but also to discuss larger refactors to it. I'm milestoning for 1.13, since at least the small speed-ups can be merged for that release.\r\n\r\n/cc @rsc @dsnet @bradfitz @josharian @kevinburke ",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/40983",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/40983/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/40983/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/40983/events",
            "html_url": "https://github.com/golang/go/pull/40983",
            "id": 684068444,
            "node_id": "MDExOlB1bGxSZXF1ZXN0NDcyMDQwMzU1",
            "number": 40983,
            "title": "encoding/json: return a different error type for unknown field if they are disallowed",
            "user": {
                "login": "Segflow",
                "id": 2049730,
                "node_id": "MDQ6VXNlcjIwNDk3MzA=",
                "avatar_url": "https://avatars.githubusercontent.com/u/2049730?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Segflow",
                "html_url": "https://github.com/Segflow",
                "followers_url": "https://api.github.com/users/Segflow/followers",
                "following_url": "https://api.github.com/users/Segflow/following{/other_user}",
                "gists_url": "https://api.github.com/users/Segflow/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Segflow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Segflow/subscriptions",
                "organizations_url": "https://api.github.com/users/Segflow/orgs",
                "repos_url": "https://api.github.com/users/Segflow/repos",
                "events_url": "https://api.github.com/users/Segflow/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Segflow/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 831707000,
                    "node_id": "MDU6TGFiZWw4MzE3MDcwMDA=",
                    "url": "https://api.github.com/repos/golang/go/labels/cla:%20yes",
                    "name": "cla: yes",
                    "color": "0e8a16",
                    "default": false,
                    "description": "Used by googlebot to label PRs as having a valid CLA. The text of this label should not change."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 3,
            "created_at": "2020-08-22T21:13:48Z",
            "updated_at": "2020-10-20T15:19:37Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "active_lock_reason": null,
            "draft": false,
            "pull_request": {
                "url": "https://api.github.com/repos/golang/go/pulls/40983",
                "html_url": "https://github.com/golang/go/pull/40983",
                "diff_url": "https://github.com/golang/go/pull/40983.diff",
                "patch_url": "https://github.com/golang/go/pull/40983.patch"
            },
            "body": "This PR adds a new error type `UnknownFieldError` which is the error type returned by the decoder when a unknown field is found and they are disallowed.\r\n\r\nNo change to the public API, and users relying on the error string to detect this are also not impacted.\r\n\r\nFixes https://github.com/golang/go/issues/40982",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/16212",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/16212/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/16212/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/16212/events",
            "html_url": "https://github.com/golang/go/issues/16212",
            "id": 162965572,
            "node_id": "MDU6SXNzdWUxNjI5NjU1NzI=",
            "number": 16212,
            "title": "encoding/json: do all reflect work before decoding",
            "user": {
                "login": "josharian",
                "id": 67496,
                "node_id": "MDQ6VXNlcjY3NDk2",
                "avatar_url": "https://avatars.githubusercontent.com/u/67496?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/josharian",
                "html_url": "https://github.com/josharian",
                "followers_url": "https://api.github.com/users/josharian/followers",
                "following_url": "https://api.github.com/users/josharian/following{/other_user}",
                "gists_url": "https://api.github.com/users/josharian/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/josharian/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/josharian/subscriptions",
                "organizations_url": "https://api.github.com/users/josharian/orgs",
                "repos_url": "https://api.github.com/users/josharian/repos",
                "events_url": "https://api.github.com/users/josharian/events{/privacy}",
                "received_events_url": "https://api.github.com/users/josharian/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373399998,
                    "node_id": "MDU6TGFiZWwzNzMzOTk5OTg=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsFix",
                    "name": "NeedsFix",
                    "color": "ededed",
                    "default": false,
                    "description": "The path to resolution is known, but the work has not been done."
                },
                {
                    "id": 150880191,
                    "node_id": "MDU6TGFiZWwxNTA4ODAxOTE=",
                    "url": "https://api.github.com/repos/golang/go/labels/Performance",
                    "name": "Performance",
                    "color": "ededed",
                    "default": false,
                    "description": null
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/6",
                "html_url": "https://github.com/golang/go/milestone/6",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/6/labels",
                "id": 1055141,
                "node_id": "MDk6TWlsZXN0b25lMTA1NTE0MQ==",
                "number": 6,
                "title": "Unplanned",
                "description": "No plan to fix in any specific release.\r\n",
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 2024,
                "closed_issues": 2059,
                "state": "open",
                "created_at": "2015-04-06T20:47:19Z",
                "updated_at": "2021-06-24T00:15:24Z",
                "due_on": "2099-12-31T08:00:00Z",
                "closed_at": null
            },
            "comments": 4,
            "created_at": "2016-06-29T16:07:36Z",
            "updated_at": "2018-11-22T14:15:52Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "active_lock_reason": null,
            "body": "@crawshaw commented in [CL 24472](https://go-review.googlesource.com/#/c/24472/):\n\n> With more time and care, I believe more of the JSON decoder's work could be shifted so it is done before decoding, and independent of the number of bytes processed. Maybe someone could explore that for Go 1.8.\n\nThis issue is a reminder, because CLs get forgotten.\n",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/6647",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/6647/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/6647/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/6647/events",
            "html_url": "https://github.com/golang/go/issues/6647",
            "id": 51285499,
            "node_id": "MDU6SXNzdWU1MTI4NTQ5OQ==",
            "number": 6647,
            "title": "x/tools/cmd/godoc: display type kind of each named type",
            "user": {
                "login": "btracey",
                "id": 3680859,
                "node_id": "MDQ6VXNlcjM2ODA4NTk=",
                "avatar_url": "https://avatars.githubusercontent.com/u/3680859?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/btracey",
                "html_url": "https://github.com/btracey",
                "followers_url": "https://api.github.com/users/btracey/followers",
                "following_url": "https://api.github.com/users/btracey/following{/other_user}",
                "gists_url": "https://api.github.com/users/btracey/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/btracey/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/btracey/subscriptions",
                "organizations_url": "https://api.github.com/users/btracey/orgs",
                "repos_url": "https://api.github.com/users/btracey/repos",
                "events_url": "https://api.github.com/users/btracey/events{/privacy}",
                "received_events_url": "https://api.github.com/users/btracey/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/6",
                "html_url": "https://github.com/golang/go/milestone/6",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/6/labels",
                "id": 1055141,
                "node_id": "MDk6TWlsZXN0b25lMTA1NTE0MQ==",
                "number": 6,
                "title": "Unplanned",
                "description": "No plan to fix in any specific release.\r\n",
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 2024,
                "closed_issues": 2059,
                "state": "open",
                "created_at": "2015-04-06T20:47:19Z",
                "updated_at": "2021-06-24T00:15:24Z",
                "due_on": "2099-12-31T08:00:00Z",
                "closed_at": null
            },
            "comments": 4,
            "created_at": "2013-10-23T17:19:48Z",
            "updated_at": "2015-04-14T19:39:48Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "active_lock_reason": null,
            "body": "<pre>Currently godoc does not list the base type of type, for example:\n\n<a href=\"http://golang.org/pkg/encoding/json/#Decoder\">http://golang.org/pkg/encoding/json/#Decoder</a>\n\ntype Decoder\n    func NewDecoder(r io.Reader) *Decoder\n    func (dec *Decoder) Buffered() io.Reader\ntype Marshaler\ntype MarshalerError\n    func (e *MarshalerError) Error() string\n\n\nIt would be really nice if this were listed as:\n\ntype Decoder struct\n    func NewDecoder(r io.Reader) *Decoder\n    func (dec *Decoder) Buffered() io.Reader\ntype Marshaler interface\ntype MarshalerError struct\n    func (e *MarshalerError) Error() string\n\nIt's often hard to tell if a name represents an interface or a methodless non-interface\n(for example, here Decoder has the -er suffix typical of interfaces). Additionally, many\ntimes the use of a type is much clearer if it is easily seen that it has an int as the\nunderlying representation (or whatever).</pre>\n",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/41144",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/41144/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/41144/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/41144/events",
            "html_url": "https://github.com/golang/go/issues/41144",
            "id": 689251097,
            "node_id": "MDU6SXNzdWU2ODkyNTEwOTc=",
            "number": 41144,
            "title": "encoding/json: Unmarshaler breaks DisallowUnknownFields",
            "user": {
                "login": "alvaroaleman",
                "id": 6496100,
                "node_id": "MDQ6VXNlcjY0OTYxMDA=",
                "avatar_url": "https://avatars.githubusercontent.com/u/6496100?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/alvaroaleman",
                "html_url": "https://github.com/alvaroaleman",
                "followers_url": "https://api.github.com/users/alvaroaleman/followers",
                "following_url": "https://api.github.com/users/alvaroaleman/following{/other_user}",
                "gists_url": "https://api.github.com/users/alvaroaleman/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/alvaroaleman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/alvaroaleman/subscriptions",
                "organizations_url": "https://api.github.com/users/alvaroaleman/orgs",
                "repos_url": "https://api.github.com/users/alvaroaleman/repos",
                "events_url": "https://api.github.com/users/alvaroaleman/events{/privacy}",
                "received_events_url": "https://api.github.com/users/alvaroaleman/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373402289,
                    "node_id": "MDU6TGFiZWwzNzM0MDIyODk=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
                    "name": "NeedsInvestigation",
                    "color": "ededed",
                    "default": false,
                    "description": "Someone must examine and confirm this is a valid issue and not a duplicate of an existing one."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 8,
            "created_at": "2020-08-31T14:27:19Z",
            "updated_at": "2020-09-02T21:43:39Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.15rc1 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/alvaro/.gocache\"\r\nGOENV=\"/home/alvaro/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGOMODCACHE=\"/home/alvaro/git/golang/pkg/mod\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/alvaro/git/golang\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"direct\"\r\nGOROOT=\"/usr/local/go\"\r\nGOSUMDB=\"off\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build855135854=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre>\r\n\r\n\r\n</details>\r\n\r\n### What did you do?\r\n\r\nBuilt a custom `json.Unmarshaler` to default a config file, then used a `json.Decoder` with `DisallowUnknownFields`  to unmarshal a json representation that had an additional, unknown field. I expected that to fail but it didn't.\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\n\r\nhttps://play.golang.org/p/8cEJU-Y0-9L\r\n\r\n\r\n\r\n### What did you expect to see?\r\n\r\nAn error, pointing out the unknown, additional field in the json document\r\n\r\n\r\n\r\n### What did you see instead?\r\n\r\nNo error\r\n",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/43513",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/43513/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/43513/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/43513/events",
            "html_url": "https://github.com/golang/go/issues/43513",
            "id": 778870753,
            "node_id": "MDU6SXNzdWU3Nzg4NzA3NTM=",
            "number": 43513,
            "title": "encoding/json: add line number to SyntaxError",
            "user": {
                "login": "AlexanderYastrebov",
                "id": 697976,
                "node_id": "MDQ6VXNlcjY5Nzk3Ng==",
                "avatar_url": "https://avatars.githubusercontent.com/u/697976?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/AlexanderYastrebov",
                "html_url": "https://github.com/AlexanderYastrebov",
                "followers_url": "https://api.github.com/users/AlexanderYastrebov/followers",
                "following_url": "https://api.github.com/users/AlexanderYastrebov/following{/other_user}",
                "gists_url": "https://api.github.com/users/AlexanderYastrebov/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/AlexanderYastrebov/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AlexanderYastrebov/subscriptions",
                "organizations_url": "https://api.github.com/users/AlexanderYastrebov/orgs",
                "repos_url": "https://api.github.com/users/AlexanderYastrebov/repos",
                "events_url": "https://api.github.com/users/AlexanderYastrebov/events{/privacy}",
                "received_events_url": "https://api.github.com/users/AlexanderYastrebov/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373401956,
                    "node_id": "MDU6TGFiZWwzNzM0MDE5NTY=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsDecision",
                    "name": "NeedsDecision",
                    "color": "ededed",
                    "default": false,
                    "description": "Feedback is required from experts, contributors, and/or the community before a change can be made."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 17,
            "created_at": "2021-01-05T10:59:27Z",
            "updated_at": "2021-01-08T01:29:13Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.15.6 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What did you do?\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"fmt\"\r\n\t\"io\"\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\tdec := json.NewDecoder(os.Stdin)\r\n\tfor {\r\n\t\tvar m map[string]interface{}\r\n\t\tif err := dec.Decode(&m); err == io.EOF {\r\n\t\t\tbreak\r\n\t\t} else if err != nil {\r\n\t\t\tfmt.Printf(\"%#v\\n\", err)\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n```\r\n$ echo -e '{\"x\":\\ny}' | go run jsonline.go \r\n&json.SyntaxError{msg:\"invalid character 'y' looking for beginning of value\", Offset:7}\r\n```\r\n\r\nAt the moment `SyntaxError` provides an offset of the character that caused parsing error.\r\nThe proposal is add the line number as well.\r\n\r\nI could not find such an issue therefore opened this one, please close if it was already resolved.",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/45512",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/45512/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/45512/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/45512/events",
            "html_url": "https://github.com/golang/go/issues/45512",
            "id": 855535419,
            "node_id": "MDU6SXNzdWU4NTU1MzU0MTk=",
            "number": 45512,
            "title": "encoding/json: cannot unmarshal custom interface value",
            "user": {
                "login": "colin-sitehost",
                "id": 81275553,
                "node_id": "MDQ6VXNlcjgxMjc1NTUz",
                "avatar_url": "https://avatars.githubusercontent.com/u/81275553?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/colin-sitehost",
                "html_url": "https://github.com/colin-sitehost",
                "followers_url": "https://api.github.com/users/colin-sitehost/followers",
                "following_url": "https://api.github.com/users/colin-sitehost/following{/other_user}",
                "gists_url": "https://api.github.com/users/colin-sitehost/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/colin-sitehost/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/colin-sitehost/subscriptions",
                "organizations_url": "https://api.github.com/users/colin-sitehost/orgs",
                "repos_url": "https://api.github.com/users/colin-sitehost/repos",
                "events_url": "https://api.github.com/users/colin-sitehost/events{/privacy}",
                "received_events_url": "https://api.github.com/users/colin-sitehost/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373401956,
                    "node_id": "MDU6TGFiZWwzNzM0MDE5NTY=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsDecision",
                    "name": "NeedsDecision",
                    "color": "ededed",
                    "default": false,
                    "description": "Feedback is required from experts, contributors, and/or the community before a change can be made."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 21,
            "created_at": "2021-04-12T04:41:21Z",
            "updated_at": "2021-05-05T11:16:04Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "<!--\r\nPlease answer these questions before submitting your issue. Thanks!\r\nFor questions please use one of our forums: https://github.com/golang/go/wiki/Questions\r\n-->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.16.3 linux/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGO111MODULE=\"\"\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/user/.cache/go-build\"\r\nGOENV=\"/home/user/.config/go/env\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOINSECURE=\"\"\r\nGOMODCACHE=\"/home/user/go/pkg/mod\"\r\nGONOPROXY=\"\"\r\nGONOSUMDB=\"\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/user/go\"\r\nGOPRIVATE=\"\"\r\nGOPROXY=\"https://proxy.golang.org,direct\"\r\nGOROOT=\"/usr/lib/go\"\r\nGOSUMDB=\"sum.golang.org\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/go/pkg/tool/linux_amd64\"\r\nGOVCS=\"\"\r\nGOVERSION=\"go1.16.3\"\r\nGCCGO=\"gccgo\"\r\nAR=\"ar\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"/home/user/src/go.mod\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build2204759132=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n</pre></details>\r\n\r\n### What did you do?\r\n\r\n<!--\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n-->\r\nhttps://play.golang.org/p/VMWbHeo54sj\r\n```go\r\np := private(*new(wrap))\r\nerr := json.Unmarshal([]byte(\"1\"), &p)\r\nfmt.Println(p, err)\r\n\r\np = new(wrap)\r\nerr = json.Unmarshal([]byte(\"1\"), p)\r\nfmt.Println(*p.(*wrap), err)\r\n\r\ni := (interface{})(*new(wrap))\r\nerr = json.Unmarshal([]byte(\"1\"), &i)\r\nfmt.Println(i, err)\r\n\r\ni = new(wrap)\r\nerr = json.Unmarshal([]byte(\"1\"), i)\r\nfmt.Println(*i.(*wrap), err)\r\n```\r\n\r\n\r\n### What did you expect to see?\r\nAny interface should be able to be assignable:\r\n```\r\n1 <nil>\r\n1 <nil>\r\n1 <nil>\r\n1 <nil>\r\n```\r\n\r\n\r\n### What did you see instead?\r\nInstead it appears that `interface{}` is special, and unless `main.private` implements `json.Unmarshaler` it will `error` at runtime:\r\n```\r\n0 json: cannot unmarshal number into Go value of type main.private\r\n1 <nil>\r\n1 <nil>\r\n1 <nil>\r\n```\r\nThis restriction does not seem meaningful, and I could not find it documented in source why this was enforced. Can we not mutate the pointed value inside a provided interface regardless of type?",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/34564",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/34564/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/34564/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/34564/events",
            "html_url": "https://github.com/golang/go/issues/34564",
            "id": 499178541,
            "node_id": "MDU6SXNzdWU0OTkxNzg1NDE=",
            "number": 34564,
            "title": "go/internal/gcimporter: single source of truth for decoder logic",
            "user": {
                "login": "mdempsky",
                "id": 38349,
                "node_id": "MDQ6VXNlcjM4MzQ5",
                "avatar_url": "https://avatars.githubusercontent.com/u/38349?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mdempsky",
                "html_url": "https://github.com/mdempsky",
                "followers_url": "https://api.github.com/users/mdempsky/followers",
                "following_url": "https://api.github.com/users/mdempsky/following{/other_user}",
                "gists_url": "https://api.github.com/users/mdempsky/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mdempsky/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mdempsky/subscriptions",
                "organizations_url": "https://api.github.com/users/mdempsky/orgs",
                "repos_url": "https://api.github.com/users/mdempsky/repos",
                "events_url": "https://api.github.com/users/mdempsky/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mdempsky/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373402289,
                    "node_id": "MDU6TGFiZWwzNzM0MDIyODk=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
                    "name": "NeedsInvestigation",
                    "color": "ededed",
                    "default": false,
                    "description": "Someone must examine and confirm this is a valid issue and not a duplicate of an existing one."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/6",
                "html_url": "https://github.com/golang/go/milestone/6",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/6/labels",
                "id": 1055141,
                "node_id": "MDk6TWlsZXN0b25lMTA1NTE0MQ==",
                "number": 6,
                "title": "Unplanned",
                "description": "No plan to fix in any specific release.\r\n",
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 2024,
                "closed_issues": 2059,
                "state": "open",
                "created_at": "2015-04-06T20:47:19Z",
                "updated_at": "2021-06-24T00:15:24Z",
                "due_on": "2099-12-31T08:00:00Z",
                "closed_at": null
            },
            "comments": 3,
            "created_at": "2019-09-27T00:48:51Z",
            "updated_at": "2019-10-02T19:35:55Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "active_lock_reason": null,
            "body": "It's somewhat tedious to have to maintain go/internal/gcimporter in both the standard repo and in x/tools. Can we find a better solution here?\r\n\r\nE.g., we vendor a bunch of other x/ repos into the main build. Could we do that for x/tools/go/internal/gcimporter too?\r\n\r\nI know go/internal/gcimporter is more aggressive about pruning backwards compatibility code than x/tools/go/internal/gcimporter, but I'd think we could still use the same code base and just either use different entry points into it, or build it in different ways.\r\n\r\n/cc @griesemer @alandonovan",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/29750",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/29750/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/29750/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/29750/events",
            "html_url": "https://github.com/golang/go/issues/29750",
            "id": 399307619,
            "node_id": "MDU6SXNzdWUzOTkzMDc2MTk=",
            "number": 29750,
            "title": "cmd/vet: stdmethods check gets confused if run on a package named \"xml\"",
            "user": {
                "login": "jacoelho",
                "id": 4838079,
                "node_id": "MDQ6VXNlcjQ4MzgwNzk=",
                "avatar_url": "https://avatars.githubusercontent.com/u/4838079?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jacoelho",
                "html_url": "https://github.com/jacoelho",
                "followers_url": "https://api.github.com/users/jacoelho/followers",
                "following_url": "https://api.github.com/users/jacoelho/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacoelho/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jacoelho/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacoelho/subscriptions",
                "organizations_url": "https://api.github.com/users/jacoelho/orgs",
                "repos_url": "https://api.github.com/users/jacoelho/repos",
                "events_url": "https://api.github.com/users/jacoelho/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jacoelho/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373399998,
                    "node_id": "MDU6TGFiZWwzNzMzOTk5OTg=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsFix",
                    "name": "NeedsFix",
                    "color": "ededed",
                    "default": false,
                    "description": "The path to resolution is known, but the work has not been done."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 2,
            "created_at": "2019-01-15T11:42:27Z",
            "updated_at": "2020-11-30T23:27:29Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\n### What version of Go are you using (`go version`)?\r\n\r\n<pre>\r\n$ go version\r\ngo version go1.11.4 darwin/amd64\r\n</pre>\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><summary><code>go env</code> Output</summary><br><pre>\r\n$ go env\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/jc/Library/Caches/go-build\"\r\nGOEXE=\"\"\r\nGOFLAGS=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/jc/go\"\r\nGOPROXY=\"\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/Cellar/go/1.11.4/libexec\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/Cellar/go/1.11.4/libexec/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nGOMOD=\"\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pf/_mdvc42j193c4tf6kgfm80gcss_jqd/T/go-build565539251=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n</pre></details>\r\n\r\n### What did you do?\r\nFor example, if I have the following package:\r\n```\r\npackage xml\r\n\r\nimport (\r\n\t\"encoding/xml\"\r\n\t\"io\"\r\n)\r\n\r\ntype XMLMap map[string]string\r\n\r\ntype XMLMapEntry struct {\r\n\tXMLName xml.Name\r\n\tValue   string `xml:\",chardata\"`\r\n}\r\n\r\n// UnmarshalXML \r\nfunc (m *XMLMap) UnmarshalXML(dec *xml.Decoder, start xml.StartElement) error {\r\n\tv := XMLMap{}\r\n\r\n\tfor {\r\n\t\tvar e XMLMapEntry\r\n\r\n\t\terr := dec.Decode(&e)\r\n\t\tif err == io.EOF {\r\n\t\t\tbreak\r\n\t\t}\r\n\r\n\t\tif err != nil {\r\n\t\t\treturn err\r\n\t\t}\r\n\r\n\t\tv[e.XMLName.Local] = e.Value\r\n\t}\r\n\r\n\t*m = v\r\n\treturn nil\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\n```\r\ngo vet ./...\r\n< no output>\r\n```\r\n\r\n\r\n### What did you see instead?\r\n```\r\n$ go vet ./...\r\n./xml.go:16: method UnmarshalXML(dec *xml.Decoder, start xml.StartElement) error should have signature UnmarshalXML(*xml.Decoder, xml.StartElement) error\r\n```\r\n\r\neven if I try to alias `encoding/xml` import I still get same error.\r\n\r\nIf instead I have the same code, but rename package:\r\n```\r\npackage something\r\n...\r\n<same code as before>\r\n```\r\n\r\n```\r\ngo vet ./...\r\n< no output>\r\n```\r\n\r\ngo vet doesn't seem to handle correctly if code is in package also named xml.",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/33854",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/33854/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/33854/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/33854/events",
            "html_url": "https://github.com/golang/go/issues/33854",
            "id": 485516037,
            "node_id": "MDU6SXNzdWU0ODU1MTYwMzc=",
            "number": 33854,
            "title": "encoding/json: unmarshal option to treat omitted fields as null",
            "user": {
                "login": "Qhesz",
                "id": 5576331,
                "node_id": "MDQ6VXNlcjU1NzYzMzE=",
                "avatar_url": "https://avatars.githubusercontent.com/u/5576331?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Qhesz",
                "html_url": "https://github.com/Qhesz",
                "followers_url": "https://api.github.com/users/Qhesz/followers",
                "following_url": "https://api.github.com/users/Qhesz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Qhesz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Qhesz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Qhesz/subscriptions",
                "organizations_url": "https://api.github.com/users/Qhesz/orgs",
                "repos_url": "https://api.github.com/users/Qhesz/repos",
                "events_url": "https://api.github.com/users/Qhesz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Qhesz/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373540105,
                    "node_id": "MDU6TGFiZWwzNzM1NDAxMDU=",
                    "url": "https://api.github.com/repos/golang/go/labels/FeatureRequest",
                    "name": "FeatureRequest",
                    "color": "bfd4f2",
                    "default": false,
                    "description": null
                },
                {
                    "id": 373402289,
                    "node_id": "MDU6TGFiZWwzNzM0MDIyODk=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
                    "name": "NeedsInvestigation",
                    "color": "ededed",
                    "default": false,
                    "description": "Someone must examine and confirm this is a valid issue and not a duplicate of an existing one."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 3,
            "created_at": "2019-08-27T00:20:25Z",
            "updated_at": "2019-08-29T23:25:57Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "Json objects have two types of null-like fields, either a null value for `foo` such as `{\"foo\":null}`, or an omitted `foo` field such as `{}`. When unmarshalling into a Golang struct, the field can't really be absent, but I can choose whether the field's type is nullable or not(*1). I don't want to preserve the distinction between json absent and null (one null-type is plenty), so I'd like the option to treat the absent field as if it were `null`, and map both null-like json types into the same Golang behaviour.\r\n\r\n(*1) See #33835 for proper `null` unmarshalling support, where `null` into a non-nullable type returns an error, and user-defined types determine whether they can unmarshal `null` or not. This issue makes most sense in combination with that. The current behaviour is to treat both absent and `null` like absent when unmarshalling, and in combination with #33835, the (opt-in) behaviour I'm proposing is to treat both absent and `null` like `null` instead.\r\n\r\nThe behaviour that I want to avoid is having the Golang field skipped over during unmarshalling when the json field is absent. If my Golang field is optional / some nullable type, it doesn't make a huge difference - the field will be skipped, stay at its zero value, which I can define as the same value I'd get unmarshalling `null` into it. The issue is when I have a non-nullable field - I've gone to the effort of saying my input has a defined structure with a defined non-nullable type, I want the unmarshaller to return an error if the input did not contain the structure I said it should. My proposal would return an error in this case, by treating the absent as `null`, then unmarshalling `null` into the non-nullable golang type, and in combination with (*1) that would return an error.\r\n\r\nThe implementation I prefer is an opt-in `json.Decoder` flag along the lines of `OmittedAsNull()`, so I can set it once for my whole project. I'm less interested in an `omittedasnull` struct tag, because I'd end up writing it on every struct field I define.\r\n\r\nEither way the code would be the same when they're used: after parsing an object into a struct, determine which struct fields were not visited, and unmarshal `null` into them.\r\n\r\n",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/30301",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/30301/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/30301/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/30301/events",
            "html_url": "https://github.com/golang/go/issues/30301",
            "id": 411621994,
            "node_id": "MDU6SXNzdWU0MTE2MjE5OTQ=",
            "number": 30301,
            "title": "encoding/xml: option to treat unknown fields as an error",
            "user": {
                "login": "zelch",
                "id": 1652987,
                "node_id": "MDQ6VXNlcjE2NTI5ODc=",
                "avatar_url": "https://avatars.githubusercontent.com/u/1652987?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/zelch",
                "html_url": "https://github.com/zelch",
                "followers_url": "https://api.github.com/users/zelch/followers",
                "following_url": "https://api.github.com/users/zelch/following{/other_user}",
                "gists_url": "https://api.github.com/users/zelch/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/zelch/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/zelch/subscriptions",
                "organizations_url": "https://api.github.com/users/zelch/orgs",
                "repos_url": "https://api.github.com/users/zelch/repos",
                "events_url": "https://api.github.com/users/zelch/events{/privacy}",
                "received_events_url": "https://api.github.com/users/zelch/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373540105,
                    "node_id": "MDU6TGFiZWwzNzM1NDAxMDU=",
                    "url": "https://api.github.com/repos/golang/go/labels/FeatureRequest",
                    "name": "FeatureRequest",
                    "color": "bfd4f2",
                    "default": false,
                    "description": null
                },
                {
                    "id": 373402289,
                    "node_id": "MDU6TGFiZWwzNzM0MDIyODk=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
                    "name": "NeedsInvestigation",
                    "color": "ededed",
                    "default": false,
                    "description": "Someone must examine and confirm this is a valid issue and not a duplicate of an existing one."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 3,
            "created_at": "2019-02-18T19:49:27Z",
            "updated_at": "2019-10-09T20:16:15Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "<!-- Please answer these questions before submitting your issue. Thanks! -->\r\n\r\nTowards the end of 2013, issue #6901 was opened requesting support to error on unknown fields instead of silently dropping the data.\r\n\r\nIn 2016, that issue was closed in favor of issue #15314, where DisallowUnknownFields was implemented for JSON, however that issue was JSON specific, and as a result the issue was never really resolved for encoding/xml.\r\n\r\nAs such, I would like to propose either adding DisallowUnknownFields to the encoding/xml Decoder type, to exactly mirror the JSON API, or adding DisallowUnknownElements and DisallowUnknownAttributes to the encoding/xml Decoder type.\r\n\r\nThe former would provide more consistency between the JSON and XML interfaces, the latter would be a moderately better fit for XML.\r\n\r\nFrom a look through the code, it looks like it should be reasonably trivial to implement either version, and I would be happy to do the implantation work if there is agreement on how to go about it.",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/26946",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/26946/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/26946/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/26946/events",
            "html_url": "https://github.com/golang/go/issues/26946",
            "id": 349832945,
            "node_id": "MDU6SXNzdWUzNDk4MzI5NDU=",
            "number": 26946,
            "title": "encoding/json: clarify what happens when unmarshaling into a non-empty interface{}",
            "user": {
                "login": "deuill",
                "id": 1138950,
                "node_id": "MDQ6VXNlcjExMzg5NTA=",
                "avatar_url": "https://avatars.githubusercontent.com/u/1138950?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/deuill",
                "html_url": "https://github.com/deuill",
                "followers_url": "https://api.github.com/users/deuill/followers",
                "following_url": "https://api.github.com/users/deuill/following{/other_user}",
                "gists_url": "https://api.github.com/users/deuill/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/deuill/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/deuill/subscriptions",
                "organizations_url": "https://api.github.com/users/deuill/orgs",
                "repos_url": "https://api.github.com/users/deuill/repos",
                "events_url": "https://api.github.com/users/deuill/events{/privacy}",
                "received_events_url": "https://api.github.com/users/deuill/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 150880209,
                    "node_id": "MDU6TGFiZWwxNTA4ODAyMDk=",
                    "url": "https://api.github.com/repos/golang/go/labels/Documentation",
                    "name": "Documentation",
                    "color": "aaffaa",
                    "default": false,
                    "description": null
                },
                {
                    "id": 373399998,
                    "node_id": "MDU6TGFiZWwzNzMzOTk5OTg=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsFix",
                    "name": "NeedsFix",
                    "color": "ededed",
                    "default": false,
                    "description": "The path to resolution is known, but the work has not been done."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/117",
                "html_url": "https://github.com/golang/go/milestone/117",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
                "id": 4737058,
                "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
                "number": 117,
                "title": "Backlog",
                "description": null,
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 1798,
                "closed_issues": 744,
                "state": "open",
                "created_at": "2019-10-09T17:14:22Z",
                "updated_at": "2021-06-24T19:20:48Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 12,
            "created_at": "2018-08-12T18:19:01Z",
            "updated_at": "2019-10-09T20:16:02Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "### What version of Go are you using (`go version`)?\r\n\r\n```\r\ngo version go1.10.3 linux/amd64\r\n```\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n```sh\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/deuill/.cache/go-build\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/deuill/.go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/lib/go\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/lib/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build634949289=/tmp/go-build -gno-record-gcc-switches\"\r\n```\r\n\r\n### What did you do?\r\n\r\nLink to Play: https://play.golang.org/p/37E1QHWofMy\r\n\r\nPassing a pointer to a `struct` (anonymous or not) as type `interface{}` to `json.Unmarshal` will have the original type replaced with a `map[string]interface{}` (correctly decoded, however). It appears the difference between correct and incorrect result is changing:\r\n\r\n```go\r\nvar nopointer interface{} = Object{}\r\n```\r\n\r\nto:\r\n\r\n```go\r\nvar nopointer = Object{}\r\n```\r\n\r\nIn the example above. A `interface{}` containing a pointer to a `struct` works as expected, e.g.:\r\n\r\n```go\r\nvar pointer interface{} = &Object{}\r\n```\r\n\r\nis the same as:\r\n\r\n```go\r\nvar pointer = &Object{}\r\n```\r\n\r\n### What did you expect to see?\r\n\r\nThe following results, in order of desirability:\r\n\r\n  - The correct `struct` type (`Object`, for the example above) populated with data from the JSON object given.\r\n  - An error denoting the inability to unmarshal into the underlying type given.\r\n  - The behaviour above documented in the documentation for `json.Unmarshal`.\r\n\r\n### What did you see instead?\r\n\r\nNone of the above? The use case that led to this issue for me was giving constructors types, where these types would be used as \"templates\" of sorts for populating with data in subsequent requests. For example:\r\n\r\n```go\r\ntype Decoder interface {\r\n    Decode(*http.Request) (interface{}, error)\r\n}\r\n\r\ntype RequestHandler func(interface{}) (interface{}, error)\r\n\r\ntype Request struct {\r\n    Value interface{}\r\n}\r\n\r\nfunc (r Request) Decode(r *http.request) (interface{}, error) {\r\n    // Read body from request\r\n    // ...\r\n\r\n    if err := json.Unmarshal(body, &r.Value); err != nil {\r\n        return nil, err\r\n    }\r\n\r\n    return r, nil\r\n}\r\n\r\ntype User struct {\r\n    Name string `json:\"name\"`\r\n}\r\n\r\nfunc NewHandler(decoder Decoder, handler RequestHandler) http.HandlerFunc {\r\n    return func(w http.ResponseWriter, r *http.Request) {\r\n        req, err := decoder.Decode(r)\r\n        if err != nil {\r\n            return\r\n        }\r\n\r\n        resp, err := handler(req)\r\n        if err != nil {\r\n            return\r\n        }\r\n\r\n        // Encode response into ResponseWriter etc.\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nIt is implied, then, that `NewHandler` is called with the bare type:\r\n\r\n```\r\nNewHandler(Request{Value: User{}}, userHandler)\r\n```\r\n\r\nWhich will give \"fresh\" values to the `RequestHandler` each time, as they emerge from `Request.Decode`. If given a pointer, i.e.:\r\n\r\n```\r\nNewHandler(Request{Value: &User{}}, userHandler)\r\n```\r\n\r\nPrevious requests will populate the pointer to `User`, leaving garbage data for future requests. \r\nApologies for the perhaps obtuse example.",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/33835",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/33835/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/33835/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/33835/events",
            "html_url": "https://github.com/golang/go/issues/33835",
            "id": 485164867,
            "node_id": "MDU6SXNzdWU0ODUxNjQ4Njc=",
            "number": 33835,
            "title": "encoding/json: unmarshalling null into non-nullable golang types",
            "user": {
                "login": "Qhesz",
                "id": 5576331,
                "node_id": "MDQ6VXNlcjU1NzYzMzE=",
                "avatar_url": "https://avatars.githubusercontent.com/u/5576331?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Qhesz",
                "html_url": "https://github.com/Qhesz",
                "followers_url": "https://api.github.com/users/Qhesz/followers",
                "following_url": "https://api.github.com/users/Qhesz/following{/other_user}",
                "gists_url": "https://api.github.com/users/Qhesz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Qhesz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Qhesz/subscriptions",
                "organizations_url": "https://api.github.com/users/Qhesz/orgs",
                "repos_url": "https://api.github.com/users/Qhesz/repos",
                "events_url": "https://api.github.com/users/Qhesz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Qhesz/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 373401956,
                    "node_id": "MDU6TGFiZWwzNzM0MDE5NTY=",
                    "url": "https://api.github.com/repos/golang/go/labels/NeedsDecision",
                    "name": "NeedsDecision",
                    "color": "ededed",
                    "default": false,
                    "description": "Feedback is required from experts, contributors, and/or the community before a change can be made."
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/6",
                "html_url": "https://github.com/golang/go/milestone/6",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/6/labels",
                "id": 1055141,
                "node_id": "MDk6TWlsZXN0b25lMTA1NTE0MQ==",
                "number": 6,
                "title": "Unplanned",
                "description": "No plan to fix in any specific release.\r\n",
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 2024,
                "closed_issues": 2059,
                "state": "open",
                "created_at": "2015-04-06T20:47:19Z",
                "updated_at": "2021-06-24T00:15:24Z",
                "due_on": "2099-12-31T08:00:00Z",
                "closed_at": null
            },
            "comments": 13,
            "created_at": "2019-08-26T10:27:12Z",
            "updated_at": "2020-10-30T10:57:17Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "### Does this issue reproduce with the latest release?\r\n\r\nAs of 1.12, yes.\r\n\r\n### What did you do?\r\n\r\nI unmarshalled `null` into an int, string, bool etc. (any non-nullable Golang type)\r\n\r\n### What did you expect to see?\r\n\r\nA type mismatch error, similar to if I'd unmarshalled a string into an int, or any other type mismatch.\r\n\r\n### What did you see instead?\r\n\r\nNo error at all, unmarshalling 'succeeds' at deserialising `null` into my non-nullable type.\r\n\r\n# Discussion\r\n\r\nI'm aware of #2540 , I'm specifically arguing for the reversal of that decision. I'm aware the documentation says \"Because null is often used in JSON to mean “not present,” unmarshalling a JSON null into any other Go type has no effect on the value and produces no error.\". I'm arguing against that behaviour.\r\n\r\n#### 1.\r\nThe unmarshaller shouldn't have an opinion on what `null` \"means\", it should accurately map json types into their golang equivalents.\r\n\r\n#### 2.\r\n\r\nIf I'm unmarshalling into a specific golang type, I've gone to the effort of statically defining the type that I expect. The unmarshaller should assist me, and reject any poorly typed input (which it does well for all types other than `null`). If I wanted to marshal into a nullable type, I would have specified a nullable type.\r\n\r\n#### 3.\r\n\r\n`myVar int` and `myVar *int` currently behave the same way when unmarshalling. In golang, an optional value is often implemented as a pointer, so I read these as \"int\" and \"optional int\", and I would expect them to behave differently.\r\n\r\n#### 4.\r\n\r\nCurrently `json` struct tags using the standard library, and `db` struct tags using the standard library for sql behave differently. In the sql libraries, nullable types are explicit, and trying to unmarshal an sql `NULL` into a non-nullable type is an error. For sql, like my point 2 above, a pointer to a value can be used as a nullable version of that type.\r\n\r\n#### ~5.~\r\n\r\n~It is impossible for me to override this behaviour of the unmarshaller. Defining my own `type NoReallyIMeantInt int` doesn't help. Unmarshalling still succeeds, because the current code parses the `null` first, and returns early without looking at the Golang type. (It explicitly sets Interfaces, pointers, maps and slices to their zero values, and ignores all other types.)~\r\n\r\n## Practicalities\r\n\r\nI'm aware this decision was made a long time ago. Realistically, what are the chances that this will be fixed now? Is it a compatibility concern? Do we think people deliberately rely on the current unmarshalling behaviour of `null`?",
            "performed_via_github_app": null,
            "score": 1.0
        },
        {
            "url": "https://api.github.com/repos/golang/go/issues/22752",
            "repository_url": "https://api.github.com/repos/golang/go",
            "labels_url": "https://api.github.com/repos/golang/go/issues/22752/labels{/name}",
            "comments_url": "https://api.github.com/repos/golang/go/issues/22752/comments",
            "events_url": "https://api.github.com/repos/golang/go/issues/22752/events",
            "html_url": "https://github.com/golang/go/issues/22752",
            "id": 274345518,
            "node_id": "MDU6SXNzdWUyNzQzNDU1MTg=",
            "number": 22752,
            "title": "proposal: encoding/json: add access to the underlying data causing UnmarshalTypeError",
            "user": {
                "login": "buyology",
                "id": 5368302,
                "node_id": "MDQ6VXNlcjUzNjgzMDI=",
                "avatar_url": "https://avatars.githubusercontent.com/u/5368302?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/buyology",
                "html_url": "https://github.com/buyology",
                "followers_url": "https://api.github.com/users/buyology/followers",
                "following_url": "https://api.github.com/users/buyology/following{/other_user}",
                "gists_url": "https://api.github.com/users/buyology/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/buyology/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/buyology/subscriptions",
                "organizations_url": "https://api.github.com/users/buyology/orgs",
                "repos_url": "https://api.github.com/users/buyology/repos",
                "events_url": "https://api.github.com/users/buyology/events{/privacy}",
                "received_events_url": "https://api.github.com/users/buyology/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 236419512,
                    "node_id": "MDU6TGFiZWwyMzY0MTk1MTI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal",
                    "name": "Proposal",
                    "color": "ededed",
                    "default": false,
                    "description": null
                },
                {
                    "id": 477156222,
                    "node_id": "MDU6TGFiZWw0NzcxNTYyMjI=",
                    "url": "https://api.github.com/repos/golang/go/labels/Proposal-Hold",
                    "name": "Proposal-Hold",
                    "color": "fbca04",
                    "default": false,
                    "description": null
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": {
                "url": "https://api.github.com/repos/golang/go/milestones/30",
                "html_url": "https://github.com/golang/go/milestone/30",
                "labels_url": "https://api.github.com/repos/golang/go/milestones/30/labels",
                "id": 1373555,
                "node_id": "MDk6TWlsZXN0b25lMTM3MzU1NQ==",
                "number": 30,
                "title": "Proposal",
                "description": "Proposals that are pending (not yet accepted/rejected).\r\nSee https://golang.org/s/proposal-process.\r\n",
                "creator": {
                    "login": "rsc",
                    "id": 104030,
                    "node_id": "MDQ6VXNlcjEwNDAzMA==",
                    "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/rsc",
                    "html_url": "https://github.com/rsc",
                    "followers_url": "https://api.github.com/users/rsc/followers",
                    "following_url": "https://api.github.com/users/rsc/following{/other_user}",
                    "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
                    "organizations_url": "https://api.github.com/users/rsc/orgs",
                    "repos_url": "https://api.github.com/users/rsc/repos",
                    "events_url": "https://api.github.com/users/rsc/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/rsc/received_events",
                    "type": "User",
                    "site_admin": false
                },
                "open_issues": 499,
                "closed_issues": 1560,
                "state": "open",
                "created_at": "2015-10-24T01:40:49Z",
                "updated_at": "2021-06-25T01:55:14Z",
                "due_on": null,
                "closed_at": null
            },
            "comments": 2,
            "created_at": "2017-11-15T23:46:13Z",
            "updated_at": "2017-11-20T21:08:45Z",
            "closed_at": null,
            "author_association": "NONE",
            "active_lock_reason": null,
            "body": "Currently one has to maintain a copy of the data being decoded by `json`.`Decoder` to retrieve the underlying data yielding an `UnmarshalTypeError` when decoding a `json` stream.\r\n\r\nMaking the data in `decodeState`.`data` directly accessible in the returned error:\r\n\r\n```go\r\ntype UnmarshalTypeError struct {\r\n    …\r\n    Data    []byte\r\n}\r\n```\r\n\r\nwould make it easy to enable improved diagnostics for faulty inputs. \r\n\r\n(Somewhat related to #8254 and #9693 which are also about error diagnostics in `encoding/json`.)",
            "performed_via_github_app": null,
            "score": 1.0
        }
    ]
}